#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <ctime>
#include <sstream>
#include <regex>

using namespace std;

class Pengguna{
public:
    string nama;
    string kataSandi;
    string lokasiPesan;
    Pengguna(string nama, string kataSandi, stringlokasiPesan =""){
      this -> nama = nama;
      this -> kataSandi = kataSandi;
      this -> lokasiPesan = lokasiPesan;
   }
};

class LahanParkir {
public:
   string lokasi;
   bool tersedia;
   double harga;
   queue<pengguna> antrianPengguna;
   LahanParkir(string lokasi, bool tersedia, double harga) {
       this->lokasi = lokasi;
       this->tersedia = tersedia;
       this->harga = harga;
   }
};

class Pemesanan {
public:
      Pengguna pengguna;
      LahanParkir lahanparkir;
      string strukParkir;
      Pemesanan(Pengguna pengguna, LahanParkir lahanparkir) : pengguna (pengguna), lahanParkir(lahanParkir) {
      this->strukParkir = generateStrukParkir();
}
string generateStrukParkir() {
      time_t now = time(0);
      tm *1tm = localtime(&now);
      stringstream ss;
      ss << "Struk Parkir: " << pengguna.nama << " - " << lahanParkir.lokasi << " - " << 1900 + 1tm ->tm_mon << "-" << 1tm ->tm_mday << " " << 1tm-><<tm_hour << ":" << 1tm->tm_min << ":" <<1tm->tm_sec << "\nHarga: " << lahanParkir.harga << " IDR";
      return ss.str();
   }
};

bool validasiKataSandi(const string& kataSandi) {
    if (kataSandi.length() < 8) return false;
    if (!regex_search(kataSandi, regex("[A-Z]"))) return false;
    if (!regex_search(kataSandi, regex("[0-9]"))) return false;
    if (!regex_search(kataSandi, regex("[^a-zA-Z0-9]"))) return false;
    return true;
}

void registrasiPengguna(vector<pengguna>& penggunaList) {
    string nama, kataSandi;
    cout << "Masukkan nama pengguna: ";
    cin >> nama;
    cout << "Masukkan kata sandi: ";
    cin >> kataSandi;

    while (!validasiKataSandi(kataSandi)) {
        cout << "Kata sandi harus minimal 8 karakter, mengandung huruf kapital, angka, dan simbol. Silahkan coba lagi: ";
        cin >> kataSandi;
    }

    penggunaList.emplace_back(pengguna(nama, kataSandi));
    cout << "Registrasi berhasil" << endl;
}

bool loginPengguna(vector<Pengguna>& penggunaList, string nama, string kataSandi) {
    for (Pengguna pengguna : penggunaList) {
        if (pengguna.nama == nama && pengguna.kataSandi == kataSandi) {
            return true;
         }
     }
     return false;
}

LahanParkir* cariLahanParkir(vector<LahanParkir>& lahanParkirList, string lokasi) {
    for (LahanParkir& lahanParkir : lahanParkirList) {
        if (lahanParkir.lokasi == lokasi) {
            return &lahanParkir;
        }
    }
    return nullptr;
}

void tampilkanLahanParkirTersedia(vector<LahanParkir>& lahanParkirList) {
    cout << "Lahan parkir yang tersedia: " << endl;
    for (lahanParkir.tersedia) {
        if (LahanParkir.tersedia) {
            cout << lahanParkir.lokasi << " - Harga: " << lahanParkir.harga << " IDR" << endl;
        }
     }
}

void pesanLahanParkir(vector<LahanParkir>& lahanParkirList, Pengguna& pengguna, string lokasi) {
    LahanParkir* lahanParkir = cariLahanParkir(lahanParkirList, lokasi);
    if (lahanParkir != nullptr) {
        if (lahanParkir->tersedia) {
            cout << "Apakah Anda yakin ingin memesan lahan parkir ini? (Ya/Tidak): ";
            string konfirmasi;
            cin >> konfirmasi;

            if (konfirmasi == "Ya" || konfirmasi == "ya") {
                Pemesanan pemesanan(pengguna, *lahanParkir);
                cout << "Selamat Anda sudah mendapatkan lahan parkir, ini adalah struk pembayaran Anda:" << endl;
                cout << pemesanan.strukParkir << endl;
                lahanParkir->tersedia = false;
                pengguna.lokasiPesan = lokasi; 
            } else {
                cout << "Pemesanan dibatalkan." << endl;
            }
        } else {
            cout << "Lahan parkir tidak tersedia! Anda akan dimasukkan ke dalam antrian." << endl;
            lahanParkir->antrianPengguna.push(pengguna);  
            pengguna.lokasiPesan = lokasi; 
            cout << "Harap tunggu sebentar. Anda berada di nomor antrian " << lahanParkir->antrianPengguna.size() << "." << endl;
        }
    } else {
        cout << "Lahan parkir tidak ditemukan!" << endl;
    }
}

int main(){
    cout << "*-_-*-_-*-_-*-_-* Selamat Datang di Sistem Pemesanan Lahan Parkir Online *-_-*-_-*-_-*-_-*" << endl;

    vector<pengguna> penggunaList;
    vector<LahanParkir> lahanParkirList;

    lahanParkirList.emplace_back(LahanParkir("Unila", true, 5000));
    lahanParkirList.emplace_back(LahanParkir("FKIP", true, 6000));
    lahanParkirList.emplace_back(LahanParkir("FISIP", true, 5500));
    lahanParkirList.emplace_back(LahanParkir("FMIPA", false, 4500));
    lahanParkirList.emplace_back(LahanParkir("FEB", true, 5000));

int pilihan;
string nama, kataSandi, lokasi;

while (true) { 
      cout << "\nPilih menu:" << endl;
      cout << "1. Registrasi Pengguna" << endl;
      cout << "2. Login Pengguna" << endl;
      cout << "3. Tampilkan Lahan Parkir Tersedia" << endl;
      cout << "4. Pesan Lahan Parkir" << endl;
      cout << "5. Cek Antrian" << endl;
      cout << "6. Keluar" << endl;
      cin >> pilihan;

      switch (pilihan) {
         case 1: 
              registrasiPengguna(PenggunaList);
              break;
          case 2: 
              cout << "Masukkan nama pengguna: ";
              cin >> nama;
              cout << "Masukkan kata sandi: ";
              cin >> kata sandi;
              if (loginPengguna(penggunaList, nama, kataSandi)) {
                  cout << " Login berhasil!" << endl;
              } else {
                   cout << "Nama pengguna atau kata sandi salah!" << endl;
              }
              break;
         case 3:
                tampilkanLahanParkirTersedia(lahanParkirList);
                break;
            case 4:
                cout << "Masukkan nama pengguna untuk memesan lahan parkir: ";
                cin >> nama;
                cout << "Masukkan lokasi lahan parkir: ";
                cin >> lokasi;
                {
                    Pengguna* pengguna = cariPengguna(penggunaList, nama);

                    if (pengguna != nullptr) {
                        pesanLahanParkir(lahanParkirList, *pengguna, lokasi);
                    } else {
                        cout << "Pengguna tidak ditemukan. Silakan login terlebih dahulu." << endl;
                    }
                }
                break;
            case 5:
                cout << "Masukkan nama pengguna untuk mengecek antrian: ";
                cin >> nama;
                cout << "Masukkan lokasi lahan parkir yang ingin dicek: ";
                cin >> lokasi;
                {

                   Pengguna* pengguna = cariPengguna(penggunaList, nama);
                    if (pengguna != nullptr) {
                        cekAntrian(lahanParkirList, nama, lokasi);
                    } else {
                        cout << "Pengguna tidak ditemukan. Silakan login terlebih dahulu." << endl;
                    }
                }
                break;
            case 6:
                cout << "Terima kasih telah menggunakan layanan kami!" << endl;
                return 0;
            default:
                cout << "Pilihan tidak valid. Silakan coba lagi." << endl;
                break;
        }
    }

    return 0;
}

